#include <bits/stdc++.h>
using namespace std;
#define ll long long
vector<vector<int>> sum;
map<ll, double> dp;
ll cal_id()
{
	ll tmp = 0;
	for (int i = 0; i < 2; i++)
		for (int j = 0; j <= 6; j++)
		{
			tmp += sum[i][j];
			tmp *= 10;
		}
	return tmp;
}
double DFS(ll id, int d)
{
	double sum_tmp = 0;

	if (dp.count(id))//一定要這樣用，用dp[id]!=0會少判
		return dp[id];
	int cnt = 0;
	for (int j = 1; j <= 6; j++)
		cnt += sum[1][j];
	if (cnt == 0)
		return 1.0;


	if (d == 0)
		return 0;

	for (int j = 1; j <= 6; j++)
		cnt += sum[0][j];

	for (int i = 0; i < 2; i++)
	{
		for (int j = 1; j <= 6; j++)
		{
			if (sum[i][j] == 0)
				continue;
			sum[i][j]--;
			sum[i][j - 1]++;
			double tmp = DFS(cal_id(), d - 1);
			sum[i][j]++;
			sum[i][j - 1]--;
			sum_tmp += tmp / cnt * sum[i][j];
		}
	}
	//cerr << "dp[" << setw(15) << setfill('0') << id << "]= " << sum_tmp << '\n';
	return dp[id] = sum_tmp;
}
int main()
{
	int n, m, d;
	int x;
	double ans;
	cin >> n >> m >> d;
	sum.resize(2);
	for (int i = 0; i < 2; i++)
		sum[i].resize(7, 0);
	for (int i = 0; i < n; i++)
	{
		cin >> x;
		sum[0][x]++;
	}
	for (int i = 0; i < m; i++)
	{
		cin >> x;
		sum[1][x]++;
	}
	ans = DFS(cal_id(), d);
	cout << ans << '\n';

	return 0;
}
